// File handles UI and control creation for ThunderLoomMtlNode.


// Calls the exported c++ command to load given file and return the ThunderLoom
// patterns. Sets the maya attributes according to these values.
// Also disconnects any maps.
global proc setTLAttributesFromFile(string $nodeDotAttr) {
    string $buffer[];
	tokenize($nodeDotAttr, ".", $buffer);
	string $nodeName = $buffer[0];
    
    string $fullAttrName = $nodeName + ".filepath";
	string $filepath = `getAttr $fullAttrName`;
    float $tlparams[] = `thunderLoomParseFile -fileName $filepath`;
    int $num_yarn_types = $tlparams[0];
    

    // Remove existing multies!
    // Use bend attribute to see how many multi-attributes we have of it,
    // (this will tell us the number of yarn_types currently on UI).
    string $multi[] = `listAttr -multi -leaf ($nodeName + ".bend")`;
    
    // Skip resetting default yarn if checkbox is on.
    // And only if there already are controls for default yarn [0].
    int $skipyrn0 = 0;
    if (`checkBox -q -v tlSkipDefaultYrnChk` && `stringArrayContains "bend[0]" $multi`) {
        $skipyrn0 = 1;
    }
    
    for($m in $multi) {
		string $index = match("\[[0-9]+\]", $m); // Index with []
        if ($skipyrn0 != 0 && $index != "[0]") {
            string $params[] = {
            "bend",
            "bendOn",
            "yarnsize",
            "yarnsizeOn",
            "twist",
            "twistOn",
            "alpha",
            "alphaOn",
            "specularColor",
            "specularColorOn",
            "specularColorAmount",
            "specularColorAmountOn",
            "specularNoise",
            "specularNoiseOn",
            "highlightWidth",
            "highlightWidthOn",
            "diffuseColor",
            "diffuseColorOn",
            "diffuseColorAmount",
            "diffuseColorAmountOn"
            };
            for ($param in $params) {
                removeMultiInstance -break true ($nodeName + "." + $param + $index);
            }
        }
    }

    
    // Set Parameters
    // The order of tlparams is determined by ThunderLoomCommand in 
    // maya_thunderloom.cpp
    int $params_per_yarn = 15; //Should match number of params being added in for loop.
    int $offset = 1; //For $num_yarn_types
    
    int $i = 0;
    if ($skipyrn0 != 0) {
        $i = 1;
    }
    while ($i<$num_yarn_types) { //For each yarn type
        print("i: " + $i);
        string $index = ("[" + $i + "]");
        setAttr ($nodeName + ".bend" + $index) $tlparams[0 + $i*$params_per_yarn + $offset];
        setAttr ($nodeName + ".yarnsize" + $index) $tlparams[1 + $i*$params_per_yarn + $offset];
        setAttr ($nodeName + ".twist" + $index) $tlparams[2 + $i*$params_per_yarn + $offset];
        setAttr ($nodeName + ".alpha" + $index) $tlparams[3 + $i*$params_per_yarn + $offset];
        // We leave Beta out, since it's the ratio between alpha and beta that matters (since we are normalizing).
        //setAttr ($nodeName + ".beta" + $index) $tlparams[4 + $i*$params_per_yarn + $offset];
        setAttr ($nodeName + ".highlightWidth" + $index) $tlparams[5 + $i*$params_per_yarn + $offset];
        float $specr = $tlparams[6 + $i*$params_per_yarn + $offset];
        float $specg = $tlparams[7 + $i*$params_per_yarn + $offset];
        float $specb = $tlparams[8 + $i*$params_per_yarn + $offset];
        setAttr ($nodeName + ".specularColor" + $index) $specr $specg $specb;
        setAttr ($nodeName + ".specularColorAmount" + $index) $tlparams[9 + $i*$params_per_yarn + $offset];
        setAttr ($nodeName + ".specularNoise" + $index) $tlparams[10 + $i*$params_per_yarn + $offset];
        float $colr = $tlparams[11 + $i*$params_per_yarn + $offset];
        float $colg = $tlparams[12 + $i*$params_per_yarn + $offset];
        float $colb = $tlparams[13 + $i*$params_per_yarn + $offset];
        setAttr ($nodeName + ".diffuseColor" + $index) $colr $colg $colb;
        setAttr ($nodeName + ".diffuseColorOn" + $index) 1;
        setAttr ($nodeName + ".diffuseColorAmount" + $index) $tlparams[14 + $i*$params_per_yarn + $offset];
        $i = $i + 1;
    }
}

// UI setup for file loading and global ThunderLoom settings.
// This function gets called by Maya when VRayThunderLoomMtl Node is opened in
// editor.
global proc AEVRayThunderLoomMtlTemplate(string $nodeName )
{
    editorTemplate -beginScrollLayout;
    
    editorTemplate -beginLayout "Pattern" -collapse false;
    // We want to call AEBrowseFileButton, AEBrowseFileButtonRepl when opening
    // file. Second string argument is used to specify a command to be executed
    // when the attribute is changed.
    editorTemplate -callCustom "AEBrowseFileButton" "AEBrowseFileButtonRepl" "browseFile";
    editorTemplate -label "Filepath" -addControl "filepath"; 
    editorTemplate -callCustom "AESkipDefaultYrn" "AESkipDefaultYrnRepl" "skipyrn0";
    editorTemplate -label "uscale" -addControl "uscale";
    editorTemplate -label "vscale" -addControl "vscale";
    editorTemplate -label "uvrotation" -addControl "uvrotation";
    editorTemplate -endLayout;

    // '-callCustom specifies function to use to build UI, second argument is 
    // a replacing function to use if attribute editor already exists and node
    // of same type should be edited.'
    editorTemplate -callCustom "AELoadYarnTypesCompound" "AELoadYarnTypesCompoundRepl" "bend";
    //editorTemplate -callCustom "AELoadYarnTypesCompound" "AELoadYarnTypesCompoundRepl" "reload";

    // Specify place for new controls to be added.
    editorTemplate -addExtraControls;

    editorTemplate -endScrollLayout;
}

// Inspired by vrayAECompoundMultiNew in vrayAEFunctions.mel
// Makes control for Reset button and then calls updateTLAttributes
// and AELoadYarnTypesCompoundRepl (function that creates yrn_type controls).
global proc AELoadYarnTypesCompound(string $nodeDotAttr) {
	string $buffer[];
	tokenize($nodeDotAttr, ".", $buffer);
	string $nodeName = $buffer[0];

    columnLayout -adjustableColumn 1 tlMultiCompAttrFrame;
    //create frame for whole multi attribute
    frameLayout -l "Yarn Types" -collapse false vrayListFrame;
        //maya like -> row layout for "New Item" button
        rowLayout -nc 1 tlButtonLayout;
            button -label "Reset Yarn Types From File" -command ("setTLAttributesFromFile(\"" + $nodeDotAttr + "\")") tlResetYarnParamsBtn;
        setParent ..;
    setParent ..;
    setParent ..;

    //force replace
    //updateTLAttributes($nodeDotAttr);
    AELoadYarnTypesCompoundRepl($nodeDotAttr);
}

// Helper function to add control for yarn_type parameter.
proc addParam(string $param, string $buffer, string $index, string $nodeName) {
    rowLayout -nc 2 -columnWidth2 50 350 -adjustableColumn 2;
        int $visible = 1;
        if ($index == "0") {
            $visible = 0;
        }
        string $ctrl_on = `checkBox -visible $visible -label "Used" ("yrn" + $buffer + $param + "On")`;
        connectControl $ctrl_on ($nodeName + "." + $param + "On" + $buffer);
        string $ctrl_f = `attrControlGrp -label $param -attribute ($nodeName + "." + $param + $buffer)`;
    setParent..;
}

// This is the Control Replace function. This is meant to be called when Maya
// wants to update the view, such as changing focus to a different instance of 
// the same node. 
// Here, we update reload button, delete any existing yarn_type controls and 
// create new ones. 
global proc AELoadYarnTypesCompoundRepl(string $nodeDotAttr) {

    // Update reset button with command to correct node.
	string $buffer[];
	tokenize($nodeDotAttr, ".", $buffer);
	string $nodeName = $buffer[0];
	button -e -command ("setTLAttributesFromFile(\"" + $nodeDotAttr + "\")") tlResetYarnParamsBtn;

    string $controlLayout = `setParent -q`;
    $controlLayout += ("|tlMultiCompAttrFrame|vrayListFrame");
	if (!`layout -exists $controlLayout`) {
			return;
	}

    // Delete existing yarn_type controls...
    string $currentChildren[] = `layout -q -childArray $controlLayout`;
    for($ch in $currentChildren) {
        if($ch != "tlButtonLayout") {
            deleteUI $ch;
        }
    }


    setParent $controlLayout;
    int $elementsCnt = `getAttr -size $nodeDotAttr`;
    if($elementsCnt > 0) {
		//	The return value of listAttr looks like this: {rgb[0], rgb[0].r, rgb[0].g, rgb[0].b, rgb[3], ... }
		// when we use it with -leaf results is something like { rgb[0], r, g, b, rgb[6] ...}
		string $multi[] = `listAttr -multi -leaf $nodeDotAttr`;
		for($m in $multi) {
            // Yarn type index as string with brackets [].
			string $buffer = match("\[[0-9]+\]", $m); 
            // Yarn type index
			int $index = match("[0-9]+", $m); 
			
            if(size($buffer) > 0) {
                string $frame_title = "Yarn Type " + $index;
                if($index == "0"){
                    $frame_title = "Default Yarn Type Settings";
                }
                string $yarn_frame = `frameLayout -collapse false -label $frame_title`;
	    		columnLayout;

                    // Specular color
                    rowLayout -nc 2 -columnWidth2 50 350 -adjustableColumn 2;
                        {
                            int $visible = 1;
                            if ($index == "0") {
                                $visible = 0;
                            }
                            string $ctrl_on = `checkBox -visible $visible -label "Used" ("yrn" + $buffer + "specularColorOn")`;
                            connectControl $ctrl_on ($nodeName + ".specularColorOn" + $buffer);
                        }
                        attrColorSliderGrp -label "specularColor" -attribute ($nodeName + ".specularColor" + $buffer);
                    setParent..;
                    addParam("specularColorAmount", $buffer, $index, $nodeName);

                    // Diffuse color
                    rowLayout -nc 2 -columnWidth2 50 350 -adjustableColumn 2;
                        {
                            int $visible = 1;
                            if ($index == "0") {
                                $visible = 0;
                            }
                            string $ctrl_on = `checkBox -visible $visible -label "Used" ("yrn" + $buffer + "diffuseColorOn")`;
                            connectControl $ctrl_on ($nodeName + ".diffuseColorOn" + $buffer);
                        }
                        attrColorSliderGrp -label "diffuseColor" -attribute ($nodeName + ".diffuseColor" + $buffer);
                    setParent..;
                    addParam("diffuseColorAmount", $buffer, $index, $nodeName);

                    // Add remaining float params.
                    string $params[] = {"bend", "yarnsize", "twist", "alpha", "specularNoise", "highlightWidth"};
                    for ($param in $params) {
                        addParam($param, $buffer, $index, $nodeName);
                    }
                setParent..;
                setParent..;
			}
		}
	}
	setParent ..;
	setParent ..;
}

global proc AESkipDefaultYrn(string $nodeDotAttr) {
	string $buffer[];
	tokenize($nodeDotAttr, ".", $buffer);
	string $nodeName = $buffer[0];

    rowLayout -nc 1 -columnWidth2 50 350 -adjustableColumn 1;
        checkBox -label "Keep default yarn parameters" tlSkipDefaultYrnChk;
    setParent..;
}
global proc AESkipDefaultYrnRepl(string $nodeDotAttr) {
	checkBox -e tlSkipDefaultYrnChk;
}

// File helper functions
global proc AEBrowseFileButton(string $nodeDotAttr) {
	string $buffer[];
	tokenize($nodeDotAttr, ".", $buffer);
	string $nodeName = $buffer[0];
    button -label "Browse File" -command ("browseFile(\"" + $nodeName + "\")") tlFileBrowseBtn;
}

global proc AEBrowseFileButtonRepl(string $nodeDotAttr) {
	string $buffer[];
	tokenize($nodeDotAttr, ".", $buffer);
	string $nodeName = $buffer[0];
	button -e -command ("browseFile(\"" + $nodeName + "\")") tlFileBrowseBtn;
}

global proc browseFile(string $nodeName) {
	string $filepath_before = `getAttr ($nodeName + ".filepath")`;
    string $loc = `fileDialog -dm "*"`;
    setAttr -type "string" ($nodeName + ".filepath") $loc;

    if ($filepath_before != $loc) {
        setTLAttributesFromFile($nodeName + ".filepath"); 
    }
}

